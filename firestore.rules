rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Función helper para verificar si el usuario está autenticado
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Función helper para verificar si es el mismo usuario
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Función helper para verificar si el usuario es admin
    // SOLO usar en colecciones que NO sean usuarios para evitar dependencia circular
    function isAdmin() {
      return isSignedIn() && 
             exists(/databases/$(database)/documents/usuarios/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }
    
    // ===========================================
    // COLECCIÓN: usuarios
    // ===========================================
    match /usuarios/{userId} {
      // TEMPORAL: Más permisivo para desarrollo
      // Lectura: cualquier usuario autenticado puede leer cualquier perfil
      allow read: if isSignedIn();
      
      // Creación: cualquier usuario autenticado puede crear su propio documento
      allow create: if isSignedIn() && request.auth.uid == userId;
      
      // Actualización: el propio usuario puede actualizar su perfil
      allow update: if isSignedIn() && request.auth.uid == userId;
      
      // Eliminación: deshabilitada para seguridad
      allow delete: if false;
    }
    
    // ===========================================
    // COLECCIÓN: eventos
    // ===========================================
    match /eventos/{eventId} {
      // Lectura: todos (público)
      allow read: if true;
      
      // Escritura: solo admin
      allow write: if isAdmin();
      
      // Subcolección: sesiones
      match /sesiones/{sessionId} {
        allow read: if true;
        allow write: if isAdmin();
      }
    }
    
    // ===========================================
    // COLECCIÓN: ponentes/speakers
    // ===========================================
    match /ponentes/{speakerId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /speakers/{speakerId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // ===========================================
    // COLECCIÓN: inscripciones/registrations
    // ===========================================
    match /inscripciones/{registrationId} {
      // Lectura: el usuario que se inscribió o admin
      allow read: if isSignedIn() && 
                     (resource.data.uid == request.auth.uid || isAdmin());
      
      // Creación: usuarios autenticados pueden crear sus propias inscripciones
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      
      // Actualización y eliminación: el usuario o admin
      allow update, delete: if isSignedIn() && 
                               (resource.data.uid == request.auth.uid || isAdmin());
    }
    
    match /registrations/{registrationId} {
      // Lectura: el usuario que se inscribió o admin
      allow read: if isSignedIn() && 
                     (resource.data.uid == request.auth.uid || isAdmin());
      
      // Creación: usuarios autenticados pueden crear sus propias inscripciones
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      
      // Actualización y eliminación: el usuario o admin
      allow update, delete: if isSignedIn() && 
                               (resource.data.uid == request.auth.uid || isAdmin());
    }
    
    // ===========================================
    // COLECCIÓN: asistencias/attendance
    // ===========================================
    match /asistencia/{attendanceId} {
      // Lectura: el usuario que asistió o admin
      allow read: if isSignedIn() && 
                     (resource.data.uid == request.auth.uid || isAdmin());
      
      // Creación: usuarios autenticados pueden marcar su propia asistencia
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      
      // Actualización y eliminación: solo admin
      allow update, delete: if isAdmin();
    }
    
    match /attendance/{attendanceId} {
      // Lectura: el usuario que asistió o admin
      allow read: if isSignedIn() && 
                     (resource.data.uid == request.auth.uid || isAdmin());
      
      // Creación: usuarios autenticados pueden marcar su propia asistencia
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      
      // Actualización y eliminación: solo admin
      allow update, delete: if isAdmin();
    }
    
    // ===========================================
    // Para desarrollo: DESCOMENTA ESTO TEMPORALMENTE
    // (permitir todo mientras pruebas)
    // ===========================================
    // match /{document=**} {
    //   allow read, write: if true;
    // }
  }
}

