rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ⚠️⚠️⚠️ DESARROLLO: REGLAS COMPLETAMENTE ABIERTAS ⚠️⚠️⚠️
    // TODO: RESTAURAR REGLAS ESPECÍFICAS EN PRODUCCIÓN
    match /{document=**} {
      allow read, write: if true;
    }
    
    // Función helper para verificar si el usuario está autenticado
    // function isSignedIn() {
    //   return request.auth != null;
    // }
    
    // Función helper para verificar si es el mismo usuario
    // function isOwner(userId) {
    //   return isSignedIn() && request.auth.uid == userId;
    // }
    
    // Función helper para verificar si el usuario es admin
    // SOLO usar en colecciones que NO sean usuarios para evitar dependencia circular
    // function isAdmin() {
    //   return isSignedIn() && 
    //          exists(/databases/$(database)/documents/usuarios/$(request.auth.uid)) &&
    //          get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    // }
    
    // ===========================================
    // COLECCIÓN: usuarios (COMENTADO TEMPORALMENTE)
    // ===========================================
    // match /usuarios/{userId} {
    //   // TEMPORAL: Más permisivo para desarrollo
    //   // Lectura: cualquier usuario autenticado puede leer cualquier perfil
    //   allow read: if isSignedIn();
    //   
    //   // Creación: cualquier usuario autenticado puede crear su propio documento
    //   allow create: if isSignedIn() && request.auth.uid == userId;
    //   
    //   // Actualización: el propio usuario puede actualizar su perfil
    //   allow update: if isSignedIn() && request.auth.uid == userId;
    //   
    //   // Eliminación: deshabilitada para seguridad
    //   allow delete: if false;
    // }
    
    // ===========================================
    // TODAS LAS REGLAS COMENTADAS TEMPORALMENTE
    // ===========================================
    // match /eventos/{eventId} {
    //   allow read: if true;
    //   allow write: if isAdmin();
    //   match /sesiones/{sessionId} {
    //     allow read: if true;
    //     allow write: if isAdmin();
    //   }
    // }
    // 
    // match /ponentes/{speakerId} {
    //   allow read: if true;
    //   allow write: if isAdmin();
    // }
    // 
    // match /speakers/{speakerId} {
    //   allow read: if true;
    //   allow write: if isAdmin();
    // }
    // 
    // match /inscripciones/{registrationId} {
    //   allow read: if isSignedIn() && 
    //                  (resource.data.uid == request.auth.uid || isAdmin());
    //   allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
    //   allow update, delete: if isSignedIn() && 
    //                            (resource.data.uid == request.auth.uid || isAdmin());
    // }
    // 
    // match /registrations/{registrationId} {
    //   allow read: if isSignedIn() && 
    //                  (resource.data.uid == request.auth.uid || isAdmin());
    //   allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
    //   allow update, delete: if isSignedIn() && 
    //                            (resource.data.uid == request.auth.uid || isAdmin());
    // }
    // 
    // match /asistencia/{attendanceId} {
    //   allow read: if isSignedIn() && 
    //                  (resource.data.uid == request.auth.uid || isAdmin());
    //   allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
    //   allow update, delete: if isAdmin();
    // }
    // 
    // match /attendance/{attendanceId} {
    //   allow read: if isSignedIn() && 
    //                  (resource.data.uid == request.auth.uid || isAdmin());
    //   allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
    //   allow update, delete: if isAdmin();
    // }
  }
}

